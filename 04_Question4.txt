library(readr)
library(tidyverse)

data_4 <- read_table("data/ATFIB.txt") %>% 
  janitor::clean_names()

#' Title Loglikelihood for inflated mixture model with imcomplete dataset
#' @param lambda `numeric` a positive value as Poisson distribution parameter
#' @param p `numeric` a positive value in [0, 1] as Bernoulli distribution parameter
#' @param datay `data.frame` the observed dataset 
#' @return `neg_logL` the negative log-likelihood
#' @export
get_logL_inc <- function(parameter,
                         datay) {
  ## need to argue why lambda 
  ## and p are separated 
  p <- parameter[1] %>% as.numeric()
  lambda <- parameter[2] %>% as.numeric()
  
  ## subset the dataset by Y
  y0 <- datay %>% filter(outcome == 0)
  n0 <- nrow(y0)
  y1 <- datay %>% filter(outcome == 1)
  n1 <- nrow(y1)
  yk <- datay %>% filter(outcome > 1)
  
  ## loglikelihood for Y==0
  logL0 <- - lambda * n0 
  ## loglikelihood for Y==1
  logL1 <- (log((1 - exp(-lambda)) * (1 - p) + p * lambda * exp(-lambda))) * n1
  ## for loop to calculate Y==k
  logLk <- 0
  for (yi in yk$outcome) {
    logLk <- logLk + log(p) + yi * log(lambda) - lambda - log(gamma(yi + 1))
  }
  (neg_logL <- -(logL0 + logL1 + logLk))
  return(neg_logL)
}

p_hat <- optim(par = c(0.1, 2),
               fn = get_logL_inc,
               lower = c(0, 1),
               upper = c(1, Inf),
               datay = data_4,
               hessian = T)
(par_mean <- p_hat$par)
## confidence interval
(par_sd <- solve(p_hat$hessian) %>% diag() %>% sqrt())
par_mean + 1.96 * par_sd
par_mean - 1.96 * par_sd


#' Title Negative likelihood for Poisson regression
#' @param lambda `numeric` a positive value as Poisson distribution parameter
#' @param datay `data.frame` the observed dataset 
#' @return `-logLk` the negative log-likelihood
#' @export
get_logL_pois <- function(lambda,
                          datay) {
  logLk <- 0
  for (yi in data_4$outcome) {
    logLk <- logLk + yi * log(lambda) - lambda - log(gamma(yi + 1))
  }
  return(-logLk)
}

lambda_pois <- optim(par = 1, 
                     fn = get_logL_pois,
                     method = "Brent",
                     lower = 0,
                     upper = 6,
                     datay = data_4)
lambda_pois$par


logL_mix <- get_logL_inc(c(1.000, 1.868),
                         datay = data_4)


logL_poisson <- get_logL_pois(lambda = 1.612,
                              datay = data_4)

# logL_mix; logL_poisson
## LRT test 
2 * abs(logL_mix - logL_poisson) %>% 
  pchisq(df = 1, lower.tail = FALSE)

lambda <- 1
p <- 0.8
N <- 100

#' Title Simulate data for mixture model
#'
#' @param lambda `numeric` parameter for Poisson as Y|Z==1 distribution
#' @param p `numeric` parameter for Bernoulli as Z's distribution
#' @param N `integer` for sample size
#' @param seed `integer` set seed
#' @return `data_sim` a simulated dataset
#' @export

get_sim <- function(lambda = 1,
                    p = 0.5,
                    N = 100,
                    seed) {
  set.seed(seed)
  ## number of Z == 1
  Z1 <- rbinom(1, N, p)
  ## number of Z == 0
  Z0 <- N - Z1
  ## Vector = Z
  Z <- c(rep(1, Z1), rep(0, Z0))
  ##     Y|Z==1 Poisson(\lambda)
  Y <- c(rpois(Z1, lambda), 
         ## Y|Z==0 Bernoulli(1 - \exp(-\lambda))
         unlist(map(rep(1, Z0), 
                    ~rbinom(1, ., (1 - exp(-lambda))))))
  data_sim <- data.frame(Z = Z, Y = Y)
  return(data_sim)
}
sim_num <- 1000
sim_N100_p02 <- map(1:sim_num, ~get_sim(seed = ., N = 100, p = 0.2))
sim_N100_p05 <- map(1:sim_num, ~get_sim(seed = ., N = 100, p = 0.5))
sim_N100_p08 <- map(1:sim_num, ~get_sim(seed = ., N = 100, p = 0.8))
sim_N1k_p02 <- map(1:sim_num, ~get_sim(seed = ., N = 1000, p = 0.2))
sim_N1k_p05 <- map(1:sim_num, ~get_sim(seed = ., N = 1000, p = 0.5))
sim_N1k_p08 <- map(1:sim_num, ~get_sim(seed = ., N = 1000, p = 0.8))

save(sim_N100_p02, sim_N100_p05, sim_N100_p08,
     sim_N1k_p02, sim_N1k_p05, sim_N1k_p08,
     file = "bios_qexam_question_4.Rdata")


#' Title Loglikelihood for inflated mixture model with imcomplete dataset
#' @param lambda `numeric` a positive value as Poisson distribution parameter
#' @param p `numeric` a positive value in [0, 1] as Bernoulli distribution parameter
#' @param datay `data.frame` the observed dataset 
#' @return `neg_logL` the negative log-likelihood
#' @export
get_logL_incomplete <- function(parameter,
                                datayz) {
  ## need to argue why lambda 
  ## and p are seperated 
  p <- parameter[1] %>% as.numeric()
  lambda <- parameter[2] %>% as.numeric()
  
  ## subset the dataset by Y
  y0 <- datayz %>% filter(Y == 0)
  n0 <- nrow(y0)
  y1 <- datayz %>% filter(Y == 1)
  n1 <- nrow(y1)
  yk <- datayz %>% filter(Y > 1)
  
  ## loglikelihood for Y==0
  logL0 <- -lambda * n0 
  ## loglikelihood for Y==1
  logL1 <- (log((1 - exp(-lambda)) * (1 - p) + p * lambda * exp(-lambda))) * n1
  ## for loop to calculate Y==k
  logLk <- 0
  for (yi in yk$Y) {
    logLk <- logLk + log(p) + yi * log(lambda) - lambda - log(gamma(yi + 1))
  }
  (neg_logL <- -(logL0 + logL1 + logLk))
  return(neg_logL)
}

# get_logL_incomplete(c(0.5, 2), sim_N100_p02[[5]])

get_logL_complete <- function(parameter,
                              datayz) {
  ## need to argue why lambda 
  ## and p are seperated 
  p <- parameter[1] %>% as.numeric()
  lambda <- parameter[2] %>% as.numeric()
  
  p1 <- exp(-lambda) * (1 - p)
  p2 <- (1 - exp(-lambda)) * (1 - p)
  
  ## subset the dataset by Y
  z1 <- datayz %>% filter(Z == 1)
  z0y1 <- datayz %>% filter(Y == 1, Z == 0)
  ny1 <- nrow(z0y1)
  z0y0 <- datayz %>% filter(Y == 0, Z == 0)
  ny0 <- nrow(z0y0)
  
  ## loglikelihood for Y==0 Z==0
  logLy0 <- ny0 * log(p1)
  ## loglikelihood for Y==1 Z==0
  logLy1 <- ny1 * log(p2)
  ## for loop to calculate Y==k
  logLk <- 0
  for (yi in z1$Y) {
    logLk <- logLk + log(p) + yi * log(lambda) - lambda - log(gamma(yi + 1))
  }
  (neg_logL <- -(logLy0 + logLy1 + logLk))
  return(neg_logL)
}

get_optim <- function(datayz) {
  ## get the estimation of parameters
  par_cpl <- optim(par = c(0.1, 1), 
                   fn = get_logL_complete,
                   lower = c(0, 0),
                   upper = c(1, Inf),
                   datayz = datayz)
  ## get the estimation of parameters
  par_icp <- optim(par = c(0.1, 1), 
                   fn = get_logL_incomplete,
                   lower = c(0, 0),
                   upper = c(1, Inf),
                   datayz = datayz)
  result <- c(unlist(par_icp$par), 
              unlist(par_cpl$par)) 
  return(result)
}

## get the simulations estimation for all the dataset 
result_N100_p02 <- map_dfc(sim_N100_p02, ~try(get_optim(.))) %>% select_if(is.numeric)
result_N100_p05 <- map_dfc(sim_N100_p05, ~try(get_optim(.))) %>% select_if(is.numeric)
result_N100_p08 <- map_dfc(sim_N100_p08, ~try(get_optim(.))) %>% select_if(is.numeric)

result_N1k_p02 <- map_dfc(sim_N1k_p02, ~try(get_optim(.))) %>% select_if(is.numeric)
result_N1k_p05 <- map_dfc(sim_N1k_p05, ~try(get_optim(.))) %>% select_if(is.numeric)
result_N1k_p08 <- map_dfc(sim_N1k_p08, ~try(get_optim(.))) %>% select_if(is.numeric)

save(result_N100_p02, result_N1k_p02,
     result_N100_p05, result_N1k_p05,
     result_N100_p08, result_N1k_p08,
     file = "bios_qexam_quesion_4_result.Rdata")


### ii. Summarize your results in a short report (2-3 paragraphs) and 1-2 figures or summary tables. Give hypotheses, conclusions, and recommendations based on what you have found.

library(matrixStats)
load("bios_qexam_quesion_4_result.Rdata")

## the mean of simulation
rowMeans(result_N100_p02)
rowMeans(result_N100_p05)
rowMeans(result_N100_p08)
rowMeans(result_N1k_p02)
rowMeans(result_N1k_p05)
rowMeans(result_N1k_p08)

## the bias
rowMeans(result_N100_p02) - c(0.2, 1, 0.2, 1)
rowMeans(result_N100_p05) - c(0.2, 1, 0.2, 1)
rowMeans(result_N100_p08) - c(0.2, 1, 0.2, 1)
rowMeans(result_N1k_p02) - c(0.2, 1, 0.2, 1)
rowMeans(result_N1k_p05) - c(0.2, 1, 0.2, 1)
rowMeans(result_N1k_p08) - c(0.2, 1, 0.2, 1)

## the variance
(sd_N100_p02 <- matrixStats::rowSds(as.matrix(result_N100_p02)))
(sd_N100_p05 <- matrixStats::rowSds(as.matrix(result_N100_p05)))
(sd_N100_p08 <- matrixStats::rowSds(as.matrix(result_N100_p08)))
(sd_N1k_p02 <- matrixStats::rowSds(as.matrix(result_N1k_p02)))
(sd_N1k_p05 <- matrixStats::rowSds(as.matrix(result_N1k_p05)))
(sd_N1k_p08 <- matrixStats::rowSds(as.matrix(result_N1k_p08)))


## ARE efficiency 
## for p
(sd_N100_p02[[1]] / sd_N100_p02[[3]])^2
(sd_N100_p05[[1]] / sd_N100_p05[[3]])^2
(sd_N100_p08[[1]] / sd_N100_p08[[3]])^2
(sd_N1k_p02[[1]] / sd_N1k_p02[[3]])^2
(sd_N1k_p05[[1]] / sd_N1k_p02[[3]])^2
(sd_N1k_p08[[1]] / sd_N1k_p08[[3]])^2

## for lambda
(sd_N100_p02[[2]] / sd_N100_p02[[4]])^2
(sd_N100_p05[[2]] / sd_N100_p05[[4]])^2
(sd_N100_p08[[2]] / sd_N100_p08[[4]])^2
(sd_N1k_p02[[2]] / sd_N1k_p02[[4]])^2
(sd_N1k_p05[[2]] / sd_N1k_p02[[4]])^2
(sd_N1k_p08[[2]] / sd_N1k_p08[[4]])^2

